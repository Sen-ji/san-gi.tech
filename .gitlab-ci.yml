image: jakzal/phpqa:php7.4
variables:
  DomainTest: 'test.san-gi.tech'
  commandsshTest: 'echo "Nous sommes sur la rasp de recette"
  && cd /var/www
  && sudo rm -rf $DomainProd
  && cd $DomainProd
  && git pull
  && sudo chmod 777 -R ./
  && composer install
  && cd /etc/apache2/sites-available
  && sudo ln -s /var/www/$DomainProd/config/apache/test.conf  $DomainTest.conf --force
  && sudo a2ensite $DomainTest.conf
  && sudo service apache2 reload
  && cd ../..
  && echo "$DomainTest"
  && cd /var/www/$DomainProd
  && php bin/console d:d:c --if-not-exists --env=recette
  && php bin/console d:m:m --no-interaction --env=recette
  && yarn
  && yarn encore production
  && composer dump-env recette
  '
  DomainProd: 'san-gi.tech'
  commandsshProd: 'echo "Nous sommes sur la rasp de prod"
  && cd /var/www
  && sudo rm -rf $DomainProd
  && sudo git clone http://gitlab.san-gi.tech:444/Sangi/$DomainProd.git
  && cd $DomainProd
  && sudo chmod 777 -R ./
  && composer install
  && composer dump-env prod
  && cd /etc/apache2/sites-available
  && sudo ln -s /var/www/$DomainProd/config/apache/web.conf  $DomainProd.conf --force
  && sudo ln -s /var/www/$DomainProd/config/apache/web-ssl.conf  $DomainProd-ssl.conf --force
  && sudo a2ensite $DomainProd.conf
  && sudo a2ensite $DomainProd-ssl.conf
  && cd ../..
  && echo "$DomainProd"
  && cd /var/www/$DomainProd
  && php bin/console d:d:c --if-not-exists --env=prod
  && php bin/console d:m:m --no-interaction --env=prod
  && sudo yarn cache clean
  && sudo yarn
  && sudo yarn encore production
  && cd ~
  && sudo service apache2 reload
'
  commandsshinstallProd: 'echo "Nous sommes sur la rasp de prod"
  && cd /var/www/$DomainProd
  && sudo git reset --hard
  && sudo git clean -fd
  && sudo git pull
  && composer install
  && composer dump-env prod
  && php bin/console d:m:m --no-interaction --env=prod
  && sudo yarn cache clean
  && sudo yarn
  && sudo yarn encore production
'
before_script:
#- composer install

cache:
  paths:
    - vendor/

stages:
  #- SecurityChecker
  #- CodingStandards
  #- UnitTests
  - install
  - deploy

#phpcs:
#  stage: CodingStandards
#  script:
#    - phpcs -v --standard=PSR12 --ignore=./src/Kernel.php ./src
#  allow_failure: false

#phpstan:
#  stage: CodingStandards
#  script:
#    - phpstan analyse ./src
#  allow_failure: false

#twig-lint:
#  stage: CodingStandards
#  script:
#    - twig-lint lint ./templates
#  allow_failure: false

deploy:recette:
  stage: deploy
  only:
    - master
  when: manual
  script:
    - echo $SSH_PRIVATE_KEY
    - echo $DomainTest
    - echo $commandsshTest
    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p 24 192.168.1.21  >> ~/.ssh/known_hosts
    - ssh pi@192.168.1.21 -p 24 $commandsshTest
deploy:installprod:
  stage: install
  only:
    - master
  when: manual
  script:
    - echo $DomainProd
    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p 26 192.168.1.28  >> ~/.ssh/known_hosts
    - ssh ubuntu@192.168.1.28 -p 26 $commandsshProd

deploy:prod:
  stage: deploy
  only:
    - master
  script:
    - echo $DomainProd
    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p 26 192.168.1.28  >> ~/.ssh/known_hosts
    - ssh ubuntu@192.168.1.28 -p 26 $commandsshinstallProd

